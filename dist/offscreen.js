import"./modulepreload-polyfill.js";let o=null;const r={};chrome.runtime.onMessage.addListener(async e=>{e.target==="offscreen"&&e.action==="playAudio"&&await u(e.romaji)});async function u(e){try{o||(o=new AudioContext),o.state==="suspended"&&await o.resume();const a=await i(e),t=o.createBufferSource();t.buffer=a,t.connect(o.destination),t.start(0),chrome.runtime.sendMessage({action:"audioPlayed",romaji:e,success:!0})}catch(a){console.error("播放音频失败:",a),chrome.runtime.sendMessage({action:"audioPlayed",romaji:e,success:!1,error:a.message})}}async function i(e){if(r[e])return r[e];try{const a=chrome.runtime.getURL(`src/assets/audio/${e}.mp3`);let t=await fetch(a);if(t.ok)console.log(`使用本地音频文件: ${e}.mp3`);else{console.log(`本地音频文件不存在: ${e}.mp3，尝试从远程加载`);const c=`https://assets.languagepod101.com/dictionary/japanese/us_audio/kana/${e}.mp3`;if(t=await fetch(c),!t.ok)throw new Error(`获取音频失败: ${t.status} ${t.statusText}`)}const n=await t.arrayBuffer(),s=await o.decodeAudioData(n);return r[e]=s,s}catch(a){throw console.error(`加载音频 ${e} 失败:`,a),a}}window.addEventListener("unload",()=>{o&&(o.close(),o=null)});
